import React, { useState, useEffect } from "react";
import nacl from "tweetnacl";
import naclUtil from "tweetnacl-util";
import { KeyRound, Copy, Download } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";

const SSHKeyGenerator: React.FC = () => {
  const [passphrase, setPassphrase] = useState<string>("");
  const [comment, setComment] = useState<string>("Generated by SSHKeyGenerator");
  const [entropy, setEntropy] = useState<number>(0);
  const [allowEntropy, setAllowEntropy] = useState<boolean>(true);
  const [privateKey, setPrivateKey] = useState<string>("");
  const [publicKey, setPublicKey] = useState<string>("");
  const [error, setError] = useState<string | null>(null);
  const [entropyValues, setEntropyValues] = useState<string>("");

  // Accumulate entropy based on mouse movement
  useEffect(() => {
    const handleMouseMove = () => {
      setEntropy((prev) => {
        if (prev >= 100) {
          window.removeEventListener("mousemove", handleMouseMove); // Stop accumulating entropy
          return prev;
        }
  
        // Generate pseudo-random entropy value (e.g., random hex values)
        const randomValue = Math.floor(Math.random() * 256).toString(16).padStart(2, "0");
        setEntropyValues((values) => {
          const updatedValues = `${values} ${randomValue}`.trim();
          return updatedValues.split(" ").slice(-100).join(" "); // Limit to last 100 values
        });
  
        return Math.min(prev + 1, 100); // Increment entropy but cap at 100
      });
    };
  
    if (allowEntropy) {
      window.addEventListener("mousemove", handleMouseMove);
    }
  
    return () => window.removeEventListener("mousemove", handleMouseMove); // Cleanup
  }, [allowEntropy]);
  

  const generateKeyPair = () => {
    if (entropy < 100) {
      setError("⚠️ Please create 100% entropy by moving your mouse over the progress bar.");
      return;
    }

    try {
      setError(null);

      // Generate ed25519 keys using TweetNaCl
      const keypair = nacl.sign.keyPair();
      const publicKeyBase64 = naclUtil.encodeBase64(keypair.publicKey);
      const privateKeyBase64 = naclUtil.encodeBase64(keypair.secretKey);

      // OpenSSH formatting for public key
      const publicKeyOpenSSH = `ssh-ed25519 ${publicKeyBase64} ${comment}`;

      setPrivateKey(privateKeyBase64);
      setPublicKey(publicKeyOpenSSH);
      setAllowEntropy(false); // Stop progress bar after generation
    } catch (err) {
      console.error("Key generation failed:", err);
      setError("⚠️ Key generation failed. Please check the parameters.");
    }
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text).catch(() =>
      setError("⚠️ Failed to copy to clipboard.")
    );
  };

  const handleDownload = (filename: string, content: string) => {
    const blob = new Blob([content], { type: "text/plain" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
    URL.revokeObjectURL(link.href);
  };

  // Update the timestamp format to YYYYMMDD-HHmmss
  const timestamp = new Date()
  .toISOString()
  .replace(/[-:T]/g, "")
  .slice(0, 15)
  .replace(/(\d{8})(\d{6})/, "$1-$2"); // Format: YYYYMMDD-HHmmss

  return (
    <>
      <div className="p-4">
        {/* Header */}
        <div className="flex items-center gap-2">
          <KeyRound size={30} />
          <h1>SSH Key Generator</h1>
        </div>

        {/* Key Options */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
          <div>
            <Label htmlFor="passphrase" className="text-sm font-medium">
              Passphrase (Optional)
            </Label>
            <Input
              id="passphrase"
              type="password"
              placeholder="Enter a passphrase for your private key"
              value={passphrase}
              onChange={(e) => setPassphrase(e.target.value)}
            />
          </div>

          <div>
            <Label htmlFor="comment" className="text-sm font-medium">
              Comment (Optional)
            </Label>
            <Input
              id="comment"
              type="text"
              placeholder="Enter a comment for your public key"
              value={comment}
              onChange={(e) => setComment(e.target.value)}
            />
          </div>

          <div>
            <Label htmlFor="entropy" className="text-sm font-medium">
              Entropy Progress
            </Label>
            <div
              className={`w-full ${!allowEntropy && "opacity-50"}`}
              onMouseMove={() => allowEntropy && setEntropy((prev) => Math.min(prev + 1, 100))}
            >
              <Progress value={entropy} />
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              Move your mouse over the progress bar to increase entropy. 100% is required to generate keys.
            </p>
            <Textarea
    id="entropyDisplay"
    value={entropyValues}
    readOnly
    placeholder="Randomness values generated from mouse movements will appear here..."
    className="w-full h-24 mt-2"
  />  
          </div>
          

          <Button
            onClick={generateKeyPair}
            className="bg-primary text-primary-foreground"
            disabled={entropy < 100}
          >
            Generate Key Pair
          </Button>
        </div>

        {/* Key Output */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
          <div>
            <Label htmlFor="privateKey" className="text-sm font-medium">
              Private Key
            </Label>
            <Textarea
              id="privateKey"
              value={privateKey}
              readOnly
              placeholder="Generated private key will appear here..."
              className="w-full"
            />
            <div className="flex gap-2 mt-2">
              <Button
                onClick={() => handleCopy(privateKey)}
                className="bg-muted text-muted-foreground flex items-center"
                disabled={!privateKey}
              >
                <Copy className="mr-2" /> Copy
              </Button>
              <Button
                onClick={() => handleDownload(`ed25519-${timestamp}.key`, privateKey)}
                className="bg-muted text-muted-foreground flex items-center"
                disabled={!privateKey}
              >
                <Download className="mr-2" /> Download
              </Button>
            </div>
          </div>

          <div>
            <Label htmlFor="publicKey" className="text-sm font-medium">
              Public Key
            </Label>
            <Textarea
              id="publicKey"
              value={publicKey}
              readOnly
              placeholder="Generated public key will appear here..."
              className="w-full"
            />
            <div className="flex gap-2 mt-2">
              <Button
                onClick={() => handleCopy(publicKey)}
                className="bg-muted text-muted-foreground flex items-center"
                disabled={!publicKey}
              >
                <Copy className="mr-2" /> Copy
              </Button>
              <Button
                onClick={() => handleDownload(`ed25519-${timestamp}.pub`, publicKey)}
                className="bg-muted text-muted-foreground flex items-center"
                disabled={!publicKey}
              >
                <Download className="mr-2" /> Download
              </Button>
            </div>
          </div>
        </div>

        {error && <p className="text-red-600 mt-4">{error}</p>}
        
  
 
      </div>
    </>
  );
};

export default SSHKeyGenerator;
